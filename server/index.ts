import express from "express";
import path from "path";
import fs from "fs";
import cors from "cors";
import { fileURLToPath } from "url";
const app = express();
const PORT = process.env.PORT || 10001; // default to 10001 locally to avoid local port conflicts

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ✅ Resolve client build output. Try common output locations and pick the first that exists.
const candidatePaths = [
  path.join(__dirname, "../client/dist"), // when client built into client/dist
  path.join(__dirname, "../dist/client/dist"), // when build output ends up under dist/client/dist
  path.join(__dirname, "../..", "client", "dist"), // alternate nested layout
  path.join(__dirname, "../../dist"), // fallback
];

let clientBuildPath = candidatePaths.find((p) => fs.existsSync(path.join(p, "index.html")));
if (!clientBuildPath) {
  clientBuildPath = path.join(__dirname, "../client/dist");
}

console.log(`Serving client from: ${clientBuildPath}`);
console.log(`Server will listen on port: ${PORT}`);

// Enable CORS (frontend may be served separately in some environments)
app.use(cors({ origin: process.env.CORS_ORIGIN || '*' }));

// Parse JSON bodies for API routes
app.use(express.json());

// Minimal API: analyze-text (mock implementation)
app.post('/api/analyze-text', (req, res) => {
  const { content, contentType } = req.body || {};

  // Very small validation (server is intentionally minimal here)
  if (!content || typeof content !== 'string' || content.trim().length < 10) {
    return res.status(400).json({ error: 'Content must be at least 10 characters' });
  }

  // Return a mock AnalysisReport matching src/shared/types.ts shape
  const mockReport = {
    credibilityScore: 72,
    analysis: `Mock analysis for content type ${contentType || 'text'}.`,
    flags: ['Possible bias detected', 'Unsupported claim'],
    recommendations: ['Check original sources', 'Verify author credentials'],
    reasoning: 'This is a mocked response generated by the server for development.',
    sources: [],
  };

  return res.json(mockReport);
});

// Minimal API: analyze-video (mock implementation)
app.post('/api/analyze-video', (req, res) => {
  const { videoUrl } = req.body || {};

  if (!videoUrl || typeof videoUrl !== 'string') {
    return res.status(400).json({ error: 'Missing videoUrl' });
  }

  const mockReport = {
    credibilityScore: 65,
    analysis: `Mock video analysis for ${videoUrl}`,
    flags: ['Possible manipulated frames'],
    recommendations: ['Check source metadata', 'Compare with other sources'],
    reasoning: 'Mocked video analysis response for development.',
    sources: [],
  };

  return res.json(mockReport);
});

// Minimal API: analyze-multimodal (accepts JSON or multipart/form-data)
app.post('/api/analyze-multimodal', (req, res) => {
  // If the client sends multipart/form-data (FormData), we won't parse files here in the mock;
  // instead, we inspect the content-type and respond with a mocked report so the frontend can proceed.
  const isFormData = req.is && req.is('multipart/form-data');

  if (isFormData) {
    const mockReport = {
      credibilityScore: 70,
      analysis: 'Mock multimodal analysis (received multipart/form-data).',
      flags: [],
      recommendations: ['Use validated sources', 'Check metadata when available'],
      reasoning: 'This is a mock response for uploaded media (FormData).',
      sources: [],
    };
    return res.json(mockReport);
  }

  // Otherwise expect JSON body with content / contentType
  const { content, contentType } = req.body || {};
  if ((!content || typeof content !== 'string') && !isFormData) {
    return res.status(400).json({ error: 'Missing content (string) or multipart form-data' });
  }

  const mockReport = {
    credibilityScore: 74,
    analysis: `Mock multimodal analysis for content type ${contentType || 'unknown'}`,
    flags: [],
    recommendations: ['Cross-check with other sources'],
    reasoning: 'Mocked multimodal response for development.',
    sources: [],
  };

  return res.json(mockReport);
});

// If a request starts with /api and reached this point, return JSON 404 rather than serving HTML.
app.use('/api', (req, res) => {
  return res.status(404).json({ error: 'API route not found' });
});

// Serve static assets from the client build
app.use(express.static(clientBuildPath));

// Serve index.html for any non-API route (SPA routing)
app.use((req, res) => {
  res.sendFile(path.join(clientBuildPath, 'index.html'));
});

app.listen(PORT, () => {
  console.log(`✅ Server running on port ${PORT}`);
});
